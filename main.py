from unicodedata import name
from USDT import parse
from BTC import parse_BTC
from ETH import parse_ETH
from BUSD import parse_BUSD
from BNB import parse_BNB
from SHIB import parse_SHIB
from MARKET import market_parse
from urllib import request
import requests
from bs4 import BeautifulSoup as BS
import config 
import asyncio
import time
import logging
from datetime import datetime
import aioschedule
from aiogram import Bot, Dispatcher, executor, types
from MAINPARSE import main_parse
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from sqlighter import SQLighter
from aiogram.utils.deep_linking import get_start_link
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# Configure logging
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot,storage=storage)
id = 0 
lg = 0
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')

class Form(StatesGroup):
    LOGIN = State()
    PASSW = State()
    NAME = State()
    FIN = State()
    REGISTRATION = State()
    lg = State()
    ps = State()

def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1] if len(text.split()) > 1 else None

@dp.message_handler(commands='start')
async def subscribe_from_start(message: types.Message):

    REGIS = types.ReplyKeyboardMarkup(resize_keyboard=True)

    login = types.KeyboardButton(text="LOGIN")
    registration = types.KeyboardButton(text="REGISTRATION")
    unique_code = extract_unique_code(message.text)

    if unique_code:
    #–µ—Å–ª–∏ –µ—Å—Ç—å id —Ä–µ—Ñ–µ—Ä–∞
        if(not db.subscriber_exists(message.from_user.id)):
    	# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            db.add_subscriber(message.from_user.id,unique_code)

            subscriptions = db.get_subscriptions()
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å
            for s in subscriptions:
                if s[1] == message.chat.id:
                    if s[5] == 0:
                        REGIS.add(registration)
                        await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ',reply_markup=REGIS)
                    if s[5] == 1:
                        REGIS.add(login)
                        await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç',reply_markup=REGIS)

        else:
        	# –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            db.update_subscription(message.from_user.id, True)
            unique_code = extract_unique_code(message.text)

            subscriptions = db.get_subscriptions()
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å
            for s in subscriptions:
                if s[1] == message.chat.id:
                    if s[5] == 0:
                        REGIS.add(registration)
                        await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ',reply_markup=REGIS)
                    if s[5] == 1:
                        REGIS.add(login)
                        await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç',reply_markup=REGIS)
    else:
       #–µ—Å–ª–∏ –≤ —Å—Å—ã–ª–∫–µ –Ω–µ—Ç id —Ä–µ—Ñ–µ—Ä–∞
        db.add_subscriber(message.from_user.id,unique_code)

        unique_code = extract_unique_code(message.text)
        subscriptions = db.get_subscriptions()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å
        for s in subscriptions:
            if s[1] == message.chat.id:
                if s[5] == 0:
                    REGIS.add(registration)
                    await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ',reply_markup=REGIS)
                if s[5] == 1:
                    REGIS.add(login)
                    await bot.send_message(message.chat.id,f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç',reply_markup=REGIS)

@dp.message_handler(content_types=['text'])
async def subscribe(message):
    if message.text =="REGISTRATION":
        await Form.LOGIN.set()
        await bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ LOGIN:')

    if message.text =="PARSE BINANCE!": 
        global id
        id = message.chat.id
        await bot.send_message(message.chat.id,f'–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å—è—Ç—å—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É...')
        parse()
        await bot.send_message(id,f'20%...')
        parse_BTC()    
        parse_ETH()
        await bot.send_message(id,f'40%...')
        parse_BUSD()
        parse_BNB()
        await bot.send_message(id,f'60%...')
        parse_SHIB()
        await bot.send_message(id,f'80%...')
        market_parse()
        await bot.send_message(id,f'100%')
        await bot.send_message(message.chat.id,f'–î–∞–Ω–Ω—ã–µ —Å–ø–∞—Ä—Å–∏–ª–∏—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞...')
        await message.reply_document(open('binance.xlsx', 'rb'))

    if message.text =="ELSE CRYPTOBIRGE!": 
        await bot.send_message(message.chat.id,f'–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω')

    if message.text == "LOGIN":
        await bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:')
        await Form.lg.set()
    if message.text =="EXIT":
        db.up_Login(0,message.chat.id)
        REGIS = types.ReplyKeyboardMarkup(resize_keyboard=True)
        login = types.KeyboardButton(text="LOGIN")
        registration = types.KeyboardButton(text="REGISTRATION")
        REGIS.add(login,registration)
        await bot.send_message(message.chat.id,f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ, –¥–µ–Ω—å–≥–∏ –∂–¥–∞—Ç—å –Ω–µ –±—É–¥—É—Ç üòâ',reply_markup = REGIS)
  

@dp.message_handler(state = Form.LOGIN)
async def register_login(message: types.Message, state: FSMContext):
    log = message.text
    db.add_email(message.chat.id,log)  
    await bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')  
    await Form.PASSW.set()

@dp.message_handler(state = Form.lg)
async def login(message: types.Message, state: FSMContext):
    global lg
    lg = message.text
    subscription = db.get_subscriptions()
    for s in subscription:
        if s[1] == message.chat.id:       
            if s[6] == lg:
                await bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ')
                await Form.ps.set()
            else:
                await bot.send_message(message.chat.id,f'–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω')
@dp.message_handler(state = Form.ps)
async def password(message: types.Message, state: FSMContext):
    global lg
    ps = message.text
    subscription = db.get_subscriptions()
    for s in subscription:
        if s[1] == message.chat.id:
            if s[6] == lg:
                if s[7] == ps:
                        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

                        button_1 = types.KeyboardButton(text="PARSE BINANCE!")
                        button_2 = types.KeyboardButton(text="ELSE CRYPTOBIRGE")
                        button_3 = types.KeyboardButton(text="EXIT")
                        keyboard.add(button_1,button_2)
                        keyboard.row(button_3)
                        await bot.send_message(message.chat.id,f'–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!',reply_markup = keyboard)
                        db.up_Login(1,message.chat.id)
                        await state.finish()
                else:
                    await bot.send_message(message.chat.id,f'–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—Ö–æ–¥–∞ –∑–∞–Ω–æ–≤–æ!')
                    await state.finish()

@dp.message_handler(state = Form.PASSW)
async def Bitcoin_payments(message: types.Message, state: FSMContext):
    passw = message.text
    db.add_passw(message.chat.id,passw) 
    await bot.send_message(message.chat.id,f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
    await Form.NAME.set()

@dp.message_handler(state = Form.NAME)
async def Bitcoin_payments(message: types.Message, state: FSMContext):
    FIO = message.text
    db.add_name(message.chat.id,FIO)  

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button_1 = types.KeyboardButton(text="PARSE BINANCE!")
    button_2 = types.KeyboardButton(text="ELSE CRYPTOBIRGE")
    button_3 = types.KeyboardButton(text="EXIT")
    keyboard.add(button_1,button_2)
    keyboard.row(button_3)

    await bot.send_message(message.chat.id,f'–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–æ—Ñ—Ç–∞!',reply_markup=keyboard)

    db.up_Login(1,message.chat.id)
    await state.finish()

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)